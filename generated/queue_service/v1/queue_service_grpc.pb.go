// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueueServiceClient is the client API for QueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueServiceClient interface {
	CreateQueueAccount(ctx context.Context, in *CreateQueueAccountRequest, opts ...grpc.CallOption) (*CreateQueueAccountResponse, error)
	DeleteQueueAccount(ctx context.Context, in *DeleteQueueAccountRequest, opts ...grpc.CallOption) (*DeleteQueueAccountResponse, error)
	GetQueueAccount(ctx context.Context, in *GetQueueAccountRequest, opts ...grpc.CallOption) (*GetQueueAccountResponse, error)
}

type queueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueServiceClient(cc grpc.ClientConnInterface) QueueServiceClient {
	return &queueServiceClient{cc}
}

func (c *queueServiceClient) CreateQueueAccount(ctx context.Context, in *CreateQueueAccountRequest, opts ...grpc.CallOption) (*CreateQueueAccountResponse, error) {
	out := new(CreateQueueAccountResponse)
	err := c.cc.Invoke(ctx, "/queue_service.QueueService/CreateQueueAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) DeleteQueueAccount(ctx context.Context, in *DeleteQueueAccountRequest, opts ...grpc.CallOption) (*DeleteQueueAccountResponse, error) {
	out := new(DeleteQueueAccountResponse)
	err := c.cc.Invoke(ctx, "/queue_service.QueueService/DeleteQueueAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) GetQueueAccount(ctx context.Context, in *GetQueueAccountRequest, opts ...grpc.CallOption) (*GetQueueAccountResponse, error) {
	out := new(GetQueueAccountResponse)
	err := c.cc.Invoke(ctx, "/queue_service.QueueService/GetQueueAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueServiceServer is the server API for QueueService service.
// All implementations must embed UnimplementedQueueServiceServer
// for forward compatibility
type QueueServiceServer interface {
	CreateQueueAccount(context.Context, *CreateQueueAccountRequest) (*CreateQueueAccountResponse, error)
	DeleteQueueAccount(context.Context, *DeleteQueueAccountRequest) (*DeleteQueueAccountResponse, error)
	GetQueueAccount(context.Context, *GetQueueAccountRequest) (*GetQueueAccountResponse, error)
	mustEmbedUnimplementedQueueServiceServer()
}

// UnimplementedQueueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueueServiceServer struct {
}

func (UnimplementedQueueServiceServer) CreateQueueAccount(context.Context, *CreateQueueAccountRequest) (*CreateQueueAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueueAccount not implemented")
}
func (UnimplementedQueueServiceServer) DeleteQueueAccount(context.Context, *DeleteQueueAccountRequest) (*DeleteQueueAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQueueAccount not implemented")
}
func (UnimplementedQueueServiceServer) GetQueueAccount(context.Context, *GetQueueAccountRequest) (*GetQueueAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueueAccount not implemented")
}
func (UnimplementedQueueServiceServer) mustEmbedUnimplementedQueueServiceServer() {}

// UnsafeQueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueServiceServer will
// result in compilation errors.
type UnsafeQueueServiceServer interface {
	mustEmbedUnimplementedQueueServiceServer()
}

func RegisterQueueServiceServer(s grpc.ServiceRegistrar, srv QueueServiceServer) {
	s.RegisterService(&QueueService_ServiceDesc, srv)
}

func _QueueService_CreateQueueAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueueAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).CreateQueueAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/queue_service.QueueService/CreateQueueAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).CreateQueueAccount(ctx, req.(*CreateQueueAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_DeleteQueueAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueueAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).DeleteQueueAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/queue_service.QueueService/DeleteQueueAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).DeleteQueueAccount(ctx, req.(*DeleteQueueAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_GetQueueAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).GetQueueAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/queue_service.QueueService/GetQueueAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).GetQueueAccount(ctx, req.(*GetQueueAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueueService_ServiceDesc is the grpc.ServiceDesc for QueueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "queue_service.QueueService",
	HandlerType: (*QueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQueueAccount",
			Handler:    _QueueService_CreateQueueAccount_Handler,
		},
		{
			MethodName: "DeleteQueueAccount",
			Handler:    _QueueService_DeleteQueueAccount_Handler,
		},
		{
			MethodName: "GetQueueAccount",
			Handler:    _QueueService_GetQueueAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/queue_service.proto",
}
