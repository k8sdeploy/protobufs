// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoreServiceClient is the client API for StoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreServiceClient interface {
	StorePods(ctx context.Context, in *StorePodsRequest, opts ...grpc.CallOption) (*StoreResponse, error)
	StoreDeployments(ctx context.Context, in *StoreDeploymentRequest, opts ...grpc.CallOption) (*StoreResponse, error)
	StoreReplicaSets(ctx context.Context, in *StoreReplicaSetsRequest, opts ...grpc.CallOption) (*StoreResponse, error)
	StoreServices(ctx context.Context, in *StoreServicesRequest, opts ...grpc.CallOption) (*StoreResponse, error)
	StoreIngresses(ctx context.Context, in *StoreIngressesRequest, opts ...grpc.CallOption) (*StoreResponse, error)
	StoreJobs(ctx context.Context, in *StoreJobsRequest, opts ...grpc.CallOption) (*StoreResponse, error)
	StoreNamespace(ctx context.Context, in *StoreNamespaceRequest, opts ...grpc.CallOption) (*StoreResponse, error)
	GetPods(ctx context.Context, in *GetPodsRequest, opts ...grpc.CallOption) (*GetPodsResponse, error)
	GetDeployments(ctx context.Context, in *GetDeploymentsRequest, opts ...grpc.CallOption) (*GetDeploymentsResponse, error)
	GetReplicaSets(ctx context.Context, in *GetReplicaSetsRequest, opts ...grpc.CallOption) (*GetReplicaSetsResponse, error)
	GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error)
	GetIngresses(ctx context.Context, in *GetIngressesRequest, opts ...grpc.CallOption) (*GetIngressesResponse, error)
	GetJobs(ctx context.Context, in *GetJobsRequest, opts ...grpc.CallOption) (*GetJobsResponse, error)
	GetNamespaces(ctx context.Context, in *GetNamespacesRequest, opts ...grpc.CallOption) (*GetNamespacesResponse, error)
}

type storeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreServiceClient(cc grpc.ClientConnInterface) StoreServiceClient {
	return &storeServiceClient{cc}
}

func (c *storeServiceClient) StorePods(ctx context.Context, in *StorePodsRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, "/data_service.StoreService/StorePods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) StoreDeployments(ctx context.Context, in *StoreDeploymentRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, "/data_service.StoreService/StoreDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) StoreReplicaSets(ctx context.Context, in *StoreReplicaSetsRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, "/data_service.StoreService/StoreReplicaSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) StoreServices(ctx context.Context, in *StoreServicesRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, "/data_service.StoreService/StoreServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) StoreIngresses(ctx context.Context, in *StoreIngressesRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, "/data_service.StoreService/StoreIngresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) StoreJobs(ctx context.Context, in *StoreJobsRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, "/data_service.StoreService/StoreJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) StoreNamespace(ctx context.Context, in *StoreNamespaceRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, "/data_service.StoreService/StoreNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetPods(ctx context.Context, in *GetPodsRequest, opts ...grpc.CallOption) (*GetPodsResponse, error) {
	out := new(GetPodsResponse)
	err := c.cc.Invoke(ctx, "/data_service.StoreService/GetPods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetDeployments(ctx context.Context, in *GetDeploymentsRequest, opts ...grpc.CallOption) (*GetDeploymentsResponse, error) {
	out := new(GetDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/data_service.StoreService/GetDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetReplicaSets(ctx context.Context, in *GetReplicaSetsRequest, opts ...grpc.CallOption) (*GetReplicaSetsResponse, error) {
	out := new(GetReplicaSetsResponse)
	err := c.cc.Invoke(ctx, "/data_service.StoreService/GetReplicaSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error) {
	out := new(GetServicesResponse)
	err := c.cc.Invoke(ctx, "/data_service.StoreService/GetServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetIngresses(ctx context.Context, in *GetIngressesRequest, opts ...grpc.CallOption) (*GetIngressesResponse, error) {
	out := new(GetIngressesResponse)
	err := c.cc.Invoke(ctx, "/data_service.StoreService/GetIngresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetJobs(ctx context.Context, in *GetJobsRequest, opts ...grpc.CallOption) (*GetJobsResponse, error) {
	out := new(GetJobsResponse)
	err := c.cc.Invoke(ctx, "/data_service.StoreService/GetJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetNamespaces(ctx context.Context, in *GetNamespacesRequest, opts ...grpc.CallOption) (*GetNamespacesResponse, error) {
	out := new(GetNamespacesResponse)
	err := c.cc.Invoke(ctx, "/data_service.StoreService/GetNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServiceServer is the server API for StoreService service.
// All implementations must embed UnimplementedStoreServiceServer
// for forward compatibility
type StoreServiceServer interface {
	StorePods(context.Context, *StorePodsRequest) (*StoreResponse, error)
	StoreDeployments(context.Context, *StoreDeploymentRequest) (*StoreResponse, error)
	StoreReplicaSets(context.Context, *StoreReplicaSetsRequest) (*StoreResponse, error)
	StoreServices(context.Context, *StoreServicesRequest) (*StoreResponse, error)
	StoreIngresses(context.Context, *StoreIngressesRequest) (*StoreResponse, error)
	StoreJobs(context.Context, *StoreJobsRequest) (*StoreResponse, error)
	StoreNamespace(context.Context, *StoreNamespaceRequest) (*StoreResponse, error)
	GetPods(context.Context, *GetPodsRequest) (*GetPodsResponse, error)
	GetDeployments(context.Context, *GetDeploymentsRequest) (*GetDeploymentsResponse, error)
	GetReplicaSets(context.Context, *GetReplicaSetsRequest) (*GetReplicaSetsResponse, error)
	GetServices(context.Context, *GetServicesRequest) (*GetServicesResponse, error)
	GetIngresses(context.Context, *GetIngressesRequest) (*GetIngressesResponse, error)
	GetJobs(context.Context, *GetJobsRequest) (*GetJobsResponse, error)
	GetNamespaces(context.Context, *GetNamespacesRequest) (*GetNamespacesResponse, error)
	mustEmbedUnimplementedStoreServiceServer()
}

// UnimplementedStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStoreServiceServer struct {
}

func (UnimplementedStoreServiceServer) StorePods(context.Context, *StorePodsRequest) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorePods not implemented")
}
func (UnimplementedStoreServiceServer) StoreDeployments(context.Context, *StoreDeploymentRequest) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreDeployments not implemented")
}
func (UnimplementedStoreServiceServer) StoreReplicaSets(context.Context, *StoreReplicaSetsRequest) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreReplicaSets not implemented")
}
func (UnimplementedStoreServiceServer) StoreServices(context.Context, *StoreServicesRequest) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreServices not implemented")
}
func (UnimplementedStoreServiceServer) StoreIngresses(context.Context, *StoreIngressesRequest) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreIngresses not implemented")
}
func (UnimplementedStoreServiceServer) StoreJobs(context.Context, *StoreJobsRequest) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreJobs not implemented")
}
func (UnimplementedStoreServiceServer) StoreNamespace(context.Context, *StoreNamespaceRequest) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreNamespace not implemented")
}
func (UnimplementedStoreServiceServer) GetPods(context.Context, *GetPodsRequest) (*GetPodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPods not implemented")
}
func (UnimplementedStoreServiceServer) GetDeployments(context.Context, *GetDeploymentsRequest) (*GetDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployments not implemented")
}
func (UnimplementedStoreServiceServer) GetReplicaSets(context.Context, *GetReplicaSetsRequest) (*GetReplicaSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplicaSets not implemented")
}
func (UnimplementedStoreServiceServer) GetServices(context.Context, *GetServicesRequest) (*GetServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (UnimplementedStoreServiceServer) GetIngresses(context.Context, *GetIngressesRequest) (*GetIngressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIngresses not implemented")
}
func (UnimplementedStoreServiceServer) GetJobs(context.Context, *GetJobsRequest) (*GetJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobs not implemented")
}
func (UnimplementedStoreServiceServer) GetNamespaces(context.Context, *GetNamespacesRequest) (*GetNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaces not implemented")
}
func (UnimplementedStoreServiceServer) mustEmbedUnimplementedStoreServiceServer() {}

// UnsafeStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServiceServer will
// result in compilation errors.
type UnsafeStoreServiceServer interface {
	mustEmbedUnimplementedStoreServiceServer()
}

func RegisterStoreServiceServer(s grpc.ServiceRegistrar, srv StoreServiceServer) {
	s.RegisterService(&StoreService_ServiceDesc, srv)
}

func _StoreService_StorePods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorePodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).StorePods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_service.StoreService/StorePods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).StorePods(ctx, req.(*StorePodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_StoreDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).StoreDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_service.StoreService/StoreDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).StoreDeployments(ctx, req.(*StoreDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_StoreReplicaSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreReplicaSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).StoreReplicaSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_service.StoreService/StoreReplicaSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).StoreReplicaSets(ctx, req.(*StoreReplicaSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_StoreServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).StoreServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_service.StoreService/StoreServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).StoreServices(ctx, req.(*StoreServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_StoreIngresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreIngressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).StoreIngresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_service.StoreService/StoreIngresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).StoreIngresses(ctx, req.(*StoreIngressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_StoreJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).StoreJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_service.StoreService/StoreJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).StoreJobs(ctx, req.(*StoreJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_StoreNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).StoreNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_service.StoreService/StoreNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).StoreNamespace(ctx, req.(*StoreNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_service.StoreService/GetPods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetPods(ctx, req.(*GetPodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_service.StoreService/GetDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetDeployments(ctx, req.(*GetDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetReplicaSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplicaSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetReplicaSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_service.StoreService/GetReplicaSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetReplicaSets(ctx, req.(*GetReplicaSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_service.StoreService/GetServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetServices(ctx, req.(*GetServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetIngresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIngressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetIngresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_service.StoreService/GetIngresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetIngresses(ctx, req.(*GetIngressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_service.StoreService/GetJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetJobs(ctx, req.(*GetJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_service.StoreService/GetNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetNamespaces(ctx, req.(*GetNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreService_ServiceDesc is the grpc.ServiceDesc for StoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "data_service.StoreService",
	HandlerType: (*StoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StorePods",
			Handler:    _StoreService_StorePods_Handler,
		},
		{
			MethodName: "StoreDeployments",
			Handler:    _StoreService_StoreDeployments_Handler,
		},
		{
			MethodName: "StoreReplicaSets",
			Handler:    _StoreService_StoreReplicaSets_Handler,
		},
		{
			MethodName: "StoreServices",
			Handler:    _StoreService_StoreServices_Handler,
		},
		{
			MethodName: "StoreIngresses",
			Handler:    _StoreService_StoreIngresses_Handler,
		},
		{
			MethodName: "StoreJobs",
			Handler:    _StoreService_StoreJobs_Handler,
		},
		{
			MethodName: "StoreNamespace",
			Handler:    _StoreService_StoreNamespace_Handler,
		},
		{
			MethodName: "GetPods",
			Handler:    _StoreService_GetPods_Handler,
		},
		{
			MethodName: "GetDeployments",
			Handler:    _StoreService_GetDeployments_Handler,
		},
		{
			MethodName: "GetReplicaSets",
			Handler:    _StoreService_GetReplicaSets_Handler,
		},
		{
			MethodName: "GetServices",
			Handler:    _StoreService_GetServices_Handler,
		},
		{
			MethodName: "GetIngresses",
			Handler:    _StoreService_GetIngresses_Handler,
		},
		{
			MethodName: "GetJobs",
			Handler:    _StoreService_GetJobs_Handler,
		},
		{
			MethodName: "GetNamespaces",
			Handler:    _StoreService_GetNamespaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/data_service.proto",
}
